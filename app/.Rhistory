summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
summarise(n=n_distinct(coordinates))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
|
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''| category.detected!='influencer'| category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''| category.detected!='influencer'| category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(Unsupported.softline,category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(Unsupported.softline=='False' )%>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(correct.category!='unknown') %>%
filter(correct.gender!='unknown') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
defect_cat =df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(correct.category!='unknown') %>%
filter(correct.gender!='unknown') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
write.csv(defect_cat,"/Users/daizylam/Desktop/04_defect_by_category.csv", row.names = FALSE)
#this is the amount of bbox recieve from detection that is in
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(category.detected) %>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
#this is the amount of bbox recieve from detection that is in
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
#this is the amount of bbox recieve from detection that is in
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
sum(n)
#this is the amount of bbox recieve from detection that is in
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(queryId) %>%
summarise(n=n_distinct(coordinates)) %>%
summarise(sum(n))
write.csv(defect_cat,"/Users/daizylam/Desktop/04_defect_by_category.csv", row.names = FALSE)
#shruti email, defect by catagory
defect_cat =df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
#shruti email, defect by catagory
df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
#shruti email, defect by catagory
defect_cat =df %>%
select(category.detected,coordinates,correct.gender,correct.category,queryId,actual.gender,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
filter(match=='True') %>%
filter(category.detected!=''& category.detected!='influencer'& category.detected!='content') %>%
filter(coordinates!='') %>%
group_by(category.detected,correct.category,correct.gender)%>%
summarise(n=n_distinct(coordinates)) %>%
data.frame()
write.csv(defect_cat,"/Users/daizylam/Desktop/04_defect_by_category.csv", row.names = FALSE)
df %>%
select(queryId,actual.gender,coordinates,match) %>%
filter(actual.gender!='Child (Boy)'& actual.gender!='Child (Girl)') %>%
summarise(n=n_distinct(queryId))
df = read.csv('/Users/daizylam/Amazon WorkDocs Drive/My Documents/!Columbia/5600/311_Call_Center_Inquiry.csv',stringsAsFactors = F)
library(pacman)
p_load(tidyr,dplyr,ggplot2,mice,tm,rpart,rpart.plot)
glimpse(df)
colSums(is.na(df))
mean(nchar(df$INQUIRY_NAME))
df%>%unnest_tokens(input = INQUIRY_NAME,output = word) %>%
group_by(word) %>%
summarize(count=n()) %>%
arrange(desc(count)) %>%
top_n(25)
library(tidytext)
df%>%unnest_tokens(input = INQUIRY_NAME,output = word) %>%
group_by(word) %>%
summarize(count=n()) %>%
arrange(desc(count)) %>%
top_n(25)
df%>%unnest_tokens(input = INQUIRY_NAME,output = word) %>%
anti_join(stop_words)%>%
group_by(word) %>%
summarize(count=n()) %>%
arrange(desc(count)) %>%
top_n(25)
shiny::runApp('Documents/GitHub/Spring2021-Project2-group8/app')
library(highcharter)
runApp('Documents/GitHub/Spring2021-Project2-group8/app')
# Analysis tab: Daizy Lam --------------------------------------------------------
data_borough=read.csv("../data/group-data-by-boro-edit.csv")
data_borough=read.csv("../data/group-data-by-boro-edit.csv")
data_borough=read.csv("../data/group-data-by-boro-edit.csv")
data_by_modzcta=read.csv(file="../data/data-by-modzcta.csv")
runApp('Documents/GitHub/Spring2021-Project2-group8/app')
# Analysis tab: Daizy Lam --------------------------------------------------------
data_borough=read.csv("../data/group-data-by-boro-edit.csv")
data_by_modzcta=read.csv(file="../data/data-by-modzcta.csv")
zipcode_latitude_longitude=read.csv(file="../data/zipcode_latitude_longitude.csv")
getwd()
setwd("~/Documents/GitHub/Spring2021-Project2-group8/app")
# Analysis tab: Daizy Lam --------------------------------------------------------
data_borough=read.csv("../data/group-data-by-boro-edit.csv")
borough_selection <- reactive({
selected_boro = input$select_borough
data_borough %>%
filter(borough %in% selected_boro)})
runApp()
runApp()
runApp()
data_borough %>%
filter(group=="Age")%>%
group_by(Borough,subgroup)%>%
summarize(CASE_COUNT) %>%
hchart('pie', hcaes(x=CASE_COUNT, y=n))
data_borough %>%
filter(group=="Age")%>%
group_by(Borough,subgroup)%>%
summarize(CASE_COUNT)
runApp()
data_borough %>%
filter(group=="Age")%>%
group_by(Borough,subgroup)%>%
summarize(CASE_COUNT) %>%
hchart('pie', hcaes(x=Borough, y=n))
data_borough %>%
filter(group=="Age")%>%
group_by(Borough,subgroup)%>%
summarize(CASE_COUNT) %>%
hchart('pie', hcaes(x=subgroup, y=n))
data_borough %>%
filter(borough %in% selected_boro)
View(data_borough)
data_borough %>%
filter(Borough %in% selected_boro)
selected_boro = input$select_borough
data_borough %>%
filter(Borough %in% selected_boro)})
data_borough %>%
filter(Borough %in% selected_boro)
data_borough %>%
filter(Borough %in% selected_boro)
selected_boro = input$select_borough
borough_selection <- reactive({
selected_boro = input$select_borough
data_borough %>%
filter(Borough %in% selected_boro)
})
selected_boro = input$select_borough
data_borough_selection <- reactive({
data_borough %>%
filter(Borough %in% input$select_borough)
})
data_borough %>%
filter(Borough %in% input$select_borough)
data_by_lat_lng %>%
filter(BOROUGH_GROUP %in% input$borough)
})
runApp()
data_borough_selection() %>%
group_by(subgroup)%>%
count(CASE_COUNT) %>%
hchart('column', hcaes(x=subgroup, y=n)
data_borough_selection() %>%
group_by(subgroup)%>%
count(CASE_COUNT) %>%
hchart('column', hcaes(x=subgroup, y=n)
data_borough_selection() %>%
group_by(subgroup)%>%
count(CASE_COUNT) %>%
hchart('column', hcaes(x=subgroup, y=n))
runApp()
data_borough %>%
filter(group=='Age')
group_by(subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n)
data_borough %>%
filter(group=='Age') %>%
group_by(subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n)
# Map tab: Yiwen Fang --------------------------------------------------------
# https://api.rpubs.com/insight/leaflet
output$map <- renderLeaflet({
# join zip boundaries and income data
char_zips <- geo_join(char_zips,
data_by_lat_lng_input(),
by_sp = "GEOID10",
by_df = "zipcode",
how = "inner")
# create color palette
pal <- colorNumeric(
palette = "Blues",
domain = char_zips[[data_type_input()]])
# create labels for zipcodes
labels <-
paste0(
"<b>", "Infomation", "</b><br/>",
"COVID_CASE_COUNT: ", as.character(char_zips$COVID_CASE_COUNT), "<br/>",
"COVID_CASE_RATE: ", as.character(char_zips$COVID_CASE_RATE), "<br/>",
"COVID_DEATH_COUNT: ", as.character(char_zips$COVID_DEATH_COUNT), "<br/>",
"COVID_DEATH_RATE: ", as.character(char_zips$COVID_DEATH_RATE), "<br/>",
"PERCENT_POSITIVE: ", as.character(char_zips$PERCENT_POSITIVE), "<br/>",
"TOTAL_COVID_TESTS: ", as.character(char_zips$TOTAL_COVID_TESTS)) %>%
lapply(htmltools::HTML)
# This if controls for no circles showing if rates are selected
if (data_type_input() %in% list("COVID_CASE_COUNT", "COVID_DEATH_COUNT", "TOTAL_COVID_TESTS")) {
map <- leaflet(char_zips) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
color = 'red',
stroke = FALSE,
fillOpacity = 0.5,
options = markerOptions(mag = char_zips[[data_type_input()]]),
clusterOptions = markerClusterOptions(iconCreateFunction=JS(sum.formula)),
popup=~paste(
"<b>", "Infomation", "</b><br/>",
"COVID_CASE_COUNT: ", as.character(COVID_CASE_COUNT), "<br/>",
"COVID_CASE_RATE: ", as.character(COVID_CASE_RATE), "<br/>",
"COVID_DEATH_COUNT: ", as.character(COVID_DEATH_COUNT), "<br/>",
"COVID_DEATH_RATE: ", as.character(COVID_DEATH_RATE), "<br/>",
"PERCENT_POSITIVE: ", as.character(PERCENT_POSITIVE), "<br/>",
"TOTAL_COVID_TESTS: ", as.character(TOTAL_COVID_TESTS)
)
) %>%
addLabelOnlyMarkers(
lng = ~longitude,
lat = ~latitude,
options = markerOptions(mag = char_zips[[data_type_input()]]),
label = char_zips[[data_type_input()]],
labelOptions = labelOptions(noHide = T, direction = 'center', textOnly = T),
clusterOptions = markerClusterOptions(iconCreateFunction=JS(sum.formula))) %>%
# add zip codes
addPolygons(fillColor = ~pal(char_zips[[data_type_input()]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
} else {
map <- leaflet(char_zips) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
# add zip codes
addPolygons(fillColor = ~pal(char_zips[[data_type_input()]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
}
})
# Vaccine tab: Yiwen Fang ----------------------------------------------------------------
Covid_Vaccinne=read.csv(file="../data/Covid_Vaccinne.csv")
output$vaccine_map <- renderLeaflet({
map <- leaflet(Covid_Vaccinne) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~Longitude,
lat=~Latitude,
color = 'red',
stroke = FALSE,
fillOpacity = 0.5,
clusterOptions = markerClusterOptions(),
popup=~paste(
"<b>", "Infomation", "</b><br/>",
"Site Name: ", as.character(Name), "<br/>",
"Type: ", as.character(Type), "<br/>",
"Address: ", as.character(Location), "<br/>",
"Zip Code: ", as.character(Zip_code), "<br/>",
"Vaccine Offered: ", as.character(Vaccine_offered), "<br/>"
)
)
})
}
data_borough %>%
filter(group=='Age') %>%
group_by(subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(borough,subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(borough,subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
count(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
runApp()
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
select(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
select(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
summarise(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
summarise(CASE_RATE) %>%
hchart('column', hcaes(x=subgroup, y=n))
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
summarise(CASE_RATE)
runApp()
data_borough %>%
filter(group=='Age') %>%
group_by(Borough,subgroup)%>%
summarise(CASE_RATE)  %>%
hchart('column', hcaes(x=subgroup, y=CASE_RATE))
runApp()
runApp()
View(data_borough)
View(data_borough)
runApp()
data_borough_selection() %>%
filter(group=='Race/ethnicity	') %>%
group_by(Borough,subgroup)%>%
summarise(CASE_RATE)  %>%
hchart('pie', hcaes(x=subgroup, y=CASE_RATE, group = Borough))
runApp()
