color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
} else {
map <- leaflet(char_zips) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
# add zip codes
addPolygons(fillColor = ~pal(char_zips[[data_type_input()]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
}
})
# Vaccine tab: Yiwen Fang ----------------------------------------------------------------
Covid_Vaccinne=read.csv(file="../data/Covid_Vaccinne.csv")
output$vaccine_map <- renderLeaflet({
map <- leaflet(Covid_Vaccinne) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~Longitude,
lat=~Latitude,
color = 'red',
stroke = FALSE,
fillOpacity = 0.5,
clusterOptions = markerClusterOptions(),
popup=~paste(
"<b>", "Infomation", "</b><br/>",
"Site Name: ", as.character(Name), "<br/>",
"Type: ", as.character(Type), "<br/>",
"Address: ", as.character(Location), "<br/>",
"Zip Code: ", as.character(Zip_code), "<br/>",
"Vaccine Offered: ", as.character(Vaccine_offered), "<br/>"
)
)
})
# Time series tab: Zhihang Xia ----------------------------------------------------------------
data_by_date <- read.csv("C:/Columbia/GR5243/Spring2021-Project2-group8/data/now-data-by-day.csv")
data_by_date <- data_by_date%>%
select(-contains(c("PROB","AVG","INCOMPLETE")))%>%
mutate(date_of_interest=parse_date_time(date_of_interest,orders="mdy"))%>%
mutate(date_of_interest=as.Date(date_of_interest))
output$TSplot <- renderPlotly({
if(input$select2=="CT"){
ggplotly(
ggplot(mapping=aes(x=data_by_date[["date_of_interest"]], y=data_by_date[[input$select]]))+
geom_point(size=0.7)+
geom_line()+
scale_x_date(date_labels = "%Y %b %d")+
theme_ipsum()+
xlab("")+
ylab(input$select)+
labs(title="Daily Case")
)}
else{
ggplotly(
ggplot(mapping=aes(x=data_by_date[["date_of_interest"]], y=data_by_date[[paste(input$select2,input$select,sep="")]]))+
geom_point(size=0.7)+
geom_line()+
scale_x_date(date_labels = "%Y %b %d")+
theme_ipsum()+
xlab("")+
ylab(input$select)+
labs(title="Daily Case")
)}
})
}
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Widgets", tabName = "widgets", icon = icon("th")),
menuItem("Vaccine Info", tabName = "Vaccine_info", icon = icon("syringe"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
h2("Dashboard tab content")
),
# Second tab content
tabItem(tabName = "map",
box(
width=2,
title = "Control Panel", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
checkboxGroupInput("borough", label = h3("Borough"),
choices = list("Manhattan" = "Manhattan", "Staten Island" = "Staten Island", "Bronx" = "Bronx", "Queens" = "Queens", "Brooklyn" = "Brooklyn"),
selected = list("Manhattan", "Staten Island", "Bronx", "Queens", "Brooklyn")),
radioButtons("data_type", label = h3("Data Type"),
choices = list("Number of confirmed cases" = "COVID_CASE_COUNT",
"Number of confirmed deaths" = "COVID_DEATH_COUNT",
"Number of people tested for COVID-19" = "TOTAL_COVID_TESTS",
"Rate of confirmed cases per 100,000 people" = "COVID_CASE_RATE",
"Rate of confirmed deaths per 100,000 people" = "COVID_DEATH_RATE",
"Percentage of people with positive COVID-19 test results" = "PERCENT_POSITIVE"
),
selected = "COVID_CASE_COUNT")
),
box(
width=10,
h2("Map tab content"),
tags$style(type = "text/css", "#map {height: calc(100vh - 150px) !important;}"),
leafletOutput("map")
)
),
# Second tab content
tabItem(tabName = "widgets",
titlePanel("My Shiny App"),
selectInput("select", label = h4("Case Type"),
choices = list("Total Cases" = "CASE_COUNT", "Death Cases" = "DEATH_COUNT", "Hospitalized Cases" = "HOSPITALIZED_COUNT"),
selected = "CASE_COUNT"),
selectInput("select2", label = h4("Area"),
choices = list("Citywise" = "CT", "Manhattan" = "MN_", "Staten Island" = "SI_", "Bronx" = "BX_", "Queens" = "QN_","Brooklyn" = "BK_"),
selected = "CT"),
mainPanel(plotlyOutput("TSplot", width="140%", height="300px"))
),
tabItem(tabName = "Vaccine_info",
h2("Vaccine Info tab content"),
leafletOutput("vaccine_map")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Widgets", tabName = "widgets", icon = icon("th")),
menuItem("Vaccine Info", tabName = "Vaccine_info", icon = icon("syringe"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
h2("Dashboard tab content")
),
# Second tab content
tabItem(tabName = "map",
box(
width=2,
title = "Control Panel", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
checkboxGroupInput("borough", label = h3("Borough"),
choices = list("Manhattan" = "Manhattan", "Staten Island" = "Staten Island", "Bronx" = "Bronx", "Queens" = "Queens", "Brooklyn" = "Brooklyn"),
selected = list("Manhattan", "Staten Island", "Bronx", "Queens", "Brooklyn")),
radioButtons("data_type", label = h3("Data Type"),
choices = list("Number of confirmed cases" = "COVID_CASE_COUNT",
"Number of confirmed deaths" = "COVID_DEATH_COUNT",
"Number of people tested for COVID-19" = "TOTAL_COVID_TESTS",
"Rate of confirmed cases per 100,000 people" = "COVID_CASE_RATE",
"Rate of confirmed deaths per 100,000 people" = "COVID_DEATH_RATE",
"Percentage of people with positive COVID-19 test results" = "PERCENT_POSITIVE"
),
selected = "COVID_CASE_COUNT")
),
box(
width=10,
h2("Map tab content"),
tags$style(type = "text/css", "#map {height: calc(100vh - 150px) !important;}"),
leafletOutput("map")
)
),
# Second tab content
tabItem(tabName = "widgets",
titlePanel("My Shiny App"),
sidebarLayout(sidebarPanel(selectInput("select", label = h4("Case Type"),
choices = list("Total Cases" = "CASE_COUNT", "Death Cases" = "DEATH_COUNT", "Hospitalized Cases" = "HOSPITALIZED_COUNT"),
selected = "CASE_COUNT"),
selectInput("select2", label = h4("Area"),
choices = list("Citywise" = "CT", "Manhattan" = "MN_", "Staten Island" = "SI_", "Bronx" = "BX_", "Queens" = "QN_","Brooklyn" = "BK_"),
selected = "CT"),
radioButtons("lines", label = h4("Line Type"),
choices = list("Connect" = "Line", "Smooth" = "Trend"),
selected = "Line")
),
mainPanel(plotlyOutput("TSplot", width="100%", height="300px"))
)),
tabItem(tabName = "Vaccine_info",
h2("Vaccine Info tab content"),
leafletOutput("vaccine_map")
)
)
)
)
if (!require("shiny")) install.packages("shiny")
library(shiny)
if (!require("leaflet")) { install.packages("leaflet", repos="http://cran.us.r-project.org")}
library(leaflet)
if (!require("dplyr")) { install.packages("dplyr")}
library(dplyr)
if (!require("tigris")) { install.packages("tigris")}
library(tigris)
if (!require("tidyverse")) { install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
library(lubridate)
library(plotly)
library(hrbrthemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
if (!require("shiny")) install.packages("shiny")
library(shiny)
if (!require("leaflet")) { install.packages("leaflet", repos="http://cran.us.r-project.org")}
library(leaflet)
if (!require("dplyr")) { install.packages("dplyr")}
library(dplyr)
if (!require("tigris")) { install.packages("tigris")}
library(tigris)
if (!require("tidyverse")) { install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
library(lubridate)
library(plotly)
library(hrbrthemes)
sum.formula = JS("function (cluster) {
var markers = cluster.getAllChildMarkers();
var sum = 0;
for (i = 0; i < markers.length; i++) {
sum += Number(markers[i].options.mag);
}
var size = sum/10000;
var mFormat = ' marker-cluster-';
if(sum < 3000) {
mFormat += 'small'
} else if (sum > 13000) {
mFormat += 'large'
} else {
mFormat += 'medium'};
return L.divIcon({ html: '<div><span>' + sum + '</span></div>', className: 'marker-cluster'+mFormat, iconSize: L.point(40, 40) });
}")
server <- function(input, output) {
data_by_modzcta=read.csv(file="../data/data-by-modzcta.csv")
zipcode_latitude_longitude=read.csv(file="../data/zipcode_latitude_longitude.csv")
data_by_lat_lng = data_by_modzcta %>%
inner_join(zipcode_latitude_longitude, by = "MODIFIED_ZCTA") %>%
mutate(zipcode=as.character(MODIFIED_ZCTA))
data_by_lat_lng_input <- reactive({
data_by_lat_lng %>%
filter(BOROUGH_GROUP %in% input$borough)
})
data_type_input <- reactive({
input$data_type
})
# cache zip boundaries that are download via tigris package
options(tigris_use_cache = TRUE)
# get zip boundaries that start with 282 (outdated example)
char_zips <- zctas(cb = TRUE)
# Map tab: Yiwen Fang --------------------------------------------------------
# https://api.rpubs.com/insight/leaflet
output$map <- renderLeaflet({
# join zip boundaries and income data
char_zips <- geo_join(char_zips,
data_by_lat_lng_input(),
by_sp = "GEOID10",
by_df = "zipcode",
how = "inner")
# create color palette
pal <- colorNumeric(
palette = "Blues",
domain = char_zips[[data_type_input()]])
# create labels for zipcodes
labels <-
paste0(
"<b>", "Infomation", "</b><br/>",
"COVID_CASE_COUNT: ", as.character(char_zips$COVID_CASE_COUNT), "<br/>",
"COVID_CASE_RATE: ", as.character(char_zips$COVID_CASE_RATE), "<br/>",
"COVID_DEATH_COUNT: ", as.character(char_zips$COVID_DEATH_COUNT), "<br/>",
"COVID_DEATH_RATE: ", as.character(char_zips$COVID_DEATH_RATE), "<br/>",
"PERCENT_POSITIVE: ", as.character(char_zips$PERCENT_POSITIVE), "<br/>",
"TOTAL_COVID_TESTS: ", as.character(char_zips$TOTAL_COVID_TESTS)) %>%
lapply(htmltools::HTML)
# This if controls for no circles showing if rates are selected
if (data_type_input() %in% list("COVID_CASE_COUNT", "COVID_DEATH_COUNT", "TOTAL_COVID_TESTS")) {
map <- leaflet(char_zips) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
color = 'red',
stroke = FALSE,
fillOpacity = 0.5,
options = markerOptions(mag = char_zips[[data_type_input()]]),
clusterOptions = markerClusterOptions(iconCreateFunction=JS(sum.formula)),
popup=~paste(
"<b>", "Infomation", "</b><br/>",
"COVID_CASE_COUNT: ", as.character(COVID_CASE_COUNT), "<br/>",
"COVID_CASE_RATE: ", as.character(COVID_CASE_RATE), "<br/>",
"COVID_DEATH_COUNT: ", as.character(COVID_DEATH_COUNT), "<br/>",
"COVID_DEATH_RATE: ", as.character(COVID_DEATH_RATE), "<br/>",
"PERCENT_POSITIVE: ", as.character(PERCENT_POSITIVE), "<br/>",
"TOTAL_COVID_TESTS: ", as.character(TOTAL_COVID_TESTS)
)
) %>%
addLabelOnlyMarkers(
lng = ~longitude,
lat = ~latitude,
options = markerOptions(mag = char_zips[[data_type_input()]]),
label = char_zips[[data_type_input()]],
labelOptions = labelOptions(noHide = T, direction = 'center', textOnly = T),
clusterOptions = markerClusterOptions(iconCreateFunction=JS(sum.formula))) %>%
# add zip codes
addPolygons(fillColor = ~pal(char_zips[[data_type_input()]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
} else {
map <- leaflet(char_zips) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
# add zip codes
addPolygons(fillColor = ~pal(char_zips[[data_type_input()]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#FF0000",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels) %>%
# add legend
addLegend(pal = pal,
values = char_zips[[data_type_input()]],
opacity = 0.7,
title = htmltools::HTML(data_type_input()),
position = "topright")
}
})
# Vaccine tab: Yiwen Fang ----------------------------------------------------------------
Covid_Vaccinne=read.csv(file="../data/Covid_Vaccinne.csv")
output$vaccine_map <- renderLeaflet({
map <- leaflet(Covid_Vaccinne) %>%
# set view to New York City
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.DarkMatter", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~Longitude,
lat=~Latitude,
color = 'red',
stroke = FALSE,
fillOpacity = 0.5,
clusterOptions = markerClusterOptions(),
popup=~paste(
"<b>", "Infomation", "</b><br/>",
"Site Name: ", as.character(Name), "<br/>",
"Type: ", as.character(Type), "<br/>",
"Address: ", as.character(Location), "<br/>",
"Zip Code: ", as.character(Zip_code), "<br/>",
"Vaccine Offered: ", as.character(Vaccine_offered), "<br/>"
)
)
})
# Time series tab: Zhihang Xia ----------------------------------------------------------------
data_by_date <- read.csv("C:/Columbia/GR5243/Spring2021-Project2-group8/data/now-data-by-day.csv")
data_by_date <- data_by_date%>%
select(-contains(c("PROB","AVG","INCOMPLETE")))%>%
mutate(date_of_interest=parse_date_time(date_of_interest,orders="mdy"))%>%
mutate(date_of_interest=as.Date(date_of_interest))
output$TSplot <- renderPlotly({
if(input$select2=="CT"){
p <- ggplot(mapping=aes(x=data_by_date[["date_of_interest"]], y=data_by_date[[input$select]]))+
geom_point(size=0.7)+
scale_x_date(date_labels = "%Y %b %d")+
theme_ipsum()+
xlab("")+
ylab(input$select)+
labs(title="Daily Cases")
if (input$lines==c("Trend")){
return(ggplotly(p+geom_smooth()))
}
else if (input$lines==c("Line")){
return(ggplotly(p+geom_line()))
}
}
else{
p <- ggplot(mapping=aes(x=data_by_date[["date_of_interest"]], y=data_by_date[[paste(input$select2,input$select,sep="")]]))+
geom_point(size=0.7)+
scale_x_date(date_labels = "%Y %b %d")+
theme_ipsum()+
xlab("")+
ylab(input$select)+
labs(title="Daily Cases")
if (input$lines==c("Trend")){
return(ggplotly(p+geom_smooth()))
}
else if (input$lines==c("Line")){
return(ggplotly(p+geom_line()))
}
}
})
}
runApp()
？ggplotly
f
f
3224+1
)
ggplotly
?ggplotly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
